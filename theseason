#!/bin/bash

declare -r BLUE='\033[0;34m'
declare -r GREEN='\033[0;32m'
declare -r YELLOW='\033[1;33m'
declare -r LIGHT_BLUE='\033[1;34m'
declare -r LIGHT_GREEN='\033[1;32m'
declare -r LIGHT_YELLOW='\033[1;33m'
declare -r LIGHT_RED='\033[1;31m'
declare -r LIGHT_CYAN='\033[1;36m'
declare -r NC='\033[0m' # No color

TOKEN='' # your jws token

handle_interrupt() {
    echo
    read -pr "Are you sure you want to exit? (y/n): " confirm
    if [ "$confirm" == "y" ]; then
        exit 0
    fi
}

# Assign the interrupt signal handling function to the SIGINT signal (CTRL+C)
trap handle_interrupt SIGINT

figlet The Player
echo -e "${LIGHT_RED}            Season Version${NC}"

# check openvpn
if pgrep -x "openvpn" > /dev/null; then
    echo -e "${LIGHT_GREEN}[+] OpenVPN is running.${NC}"
else
    echo -e "${LIGHT_RED}[!] OpenVPN is not running. Connect the VPN.${NC}"
        exit 1
fi

# check token
if [ ! "$TOKEN" ]; then
	echo -e "\n${LIGHT_BLUE}[!] Please put your JWS TOKEN ${NC}\n"
        exit 1
fi

# Token expiration date
payload=$(echo $TOKEN | awk -F'.' '{print $2}' | base64 -d -i 2>/dev/null)
expiration_unix_timestamp=$(echo "$payload" | jq -r '.exp')
expiration_date=$(date -d @"$expiration_unix_timestamp")
echo -e "\n${BLUE}[i] Your token expiration date is: $expiration_date${NC}"

echo -e "\n${YELLOW}[+]Spawn Machine... ${NC}"
curl -s -k --compressed -X $'POST' -H $'Host: labs.hackthebox.com' -H $'User-Agent: ThePlayer' -H "Authorization: Bearer $TOKEN" -H $'Origin: https://app.hackthebox.com' -H $'Referer: https://app.hackthebox.com/' -H $'Sec-Fetch-Dest: empty' -H $'Sec-Fetch-Mode: cors' -H $'Sec-Fetch-Site: same-site' -H $'Content-Length: 0' -H $'Te: trailers' $'https://labs.hackthebox.com/api/v4/arena/start' |jq . -r

# don't works since april 2024
# echo -e "${YELLOW}[+]Status of HTB servers... ${NC}"
# curl -s -q https://status.hackthebox.com/api/v2/status.json|jq .status -r

echo -e "\n${YELLOW}[+] Machine info:${NC}"

json_response_season=$(curl -s -k --compressed -X $'GET' -H $'Host: labs.hackthebox.com' -H $'User-Agent: ThePlayer' -H $'Accept: application/json, text/plain, */*' -H $'Accept-Language: es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3' -H $'Accept-Encoding: gzip, deflate, br' -H "Authorization: Bearer $TOKEN" -H $'Origin: https://app.hackthebox.com' -H $'Referer: https://app.hackthebox.com/' -H $'Sec-Fetch-Dest: empty' -H $'Sec-Fetch-Mode: cors' -H $'Sec-Fetch-Site: same-site' -H $'Te: trailers' $'https://labs.hackthebox.com/api/v4/season/machine/active')

ipvictima=$(echo "$json_response_season" | jq -r '.data.ip')
nombre=$(echo "$json_response_season" | jq -r '.data.name')
iddelamaquina=$(echo "$json_response_season" | jq -r '.data.id')

echo -e "${LIGHT_GREEN}[+]         IP: $ipvictima ${NC}"
echo -e "${LIGHT_GREEN}[+]    Machine: $nombre ${NC}"
echo -e "${LIGHT_GREEN}[+]         ID: $iddelamaquina ${NC}\n"

echo -e "${LIGHT_BLUE}[i]Ping Machine IP... ${NC}"
while ! ping -c 1 "$ipvictima" >/dev/null; do
    echo "Ping unsuccessful. Retrying in 1 second..."
    sleep 1
done

## Fast Scan and scan al open ports

echo -e "${LIGHT_BLUE}[+]Fast nmap scan \n ${NC}"
sudo nmap -T4 -F "$ipvictima"
echo -e "${LIGHT_YELLOW}\n[i] While the tests are running you can check the above ports.   ${NC}"
echo -e "${LIGHT_BLUE}[i] Testing all ports... ${NC}"

echo -e "${LIGHT_BLUE}[i] Create in hosts "$ipvictima $nombre.htb"... ${NC}"
echo "$ipvictima $nombre.htb" | sudo tee -a /etc/hosts >/dev/null

ports=$(nmap -p- -n -Pn --min-rate=3000 "$ipvictima" | grep "^[0-9]" | cut -d '/' -f 1 | tr '\n' ',' | sed s/,$//)
echo -e "${LIGHT_BLUE}[+] Ports open: ${NC}"
echo -e "${LIGHT_GREEN}[+] $ports ${NC}"
echo "$ports" > portsnmap

echo -e "${LIGHT_BLUE}\n[+]  NMAP -sV -sC -Pn launched in background  \n${NC}"
nmap -p"$ports" -sV -sC -Pn "$ipvictima" -oX ResultNmap"$nombre" &

echo -e "${LIGHT_BLUE}[i]     Continue testing... \n ${NC}"

if echo "$ports" | grep -q "\<80\>" ; then
    echo -e "${YELLOW}[+] Find open port 80 in IP $ipvictima${NC}\n"
    echo -e "-----------------------"
    echo -e "${LIGHT_CYAN}[+]Curl to IP $ipvictima save to curl80 file${NC}"
    echo -e "${LIGHT_BLUE}gobuster dir -w /usr/share/wordlists/seclists/Discovery/Web-Content/raft-small-words.txt -k -b 404 -t 100 -u http://$nombre.htb/ -o gobuster.dir.out ${NC}\n"
    echo -e "${LIGHT_BLUE}gobuster vhost -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -k -u http://$nombre.htb -o gobuster.vhost.out${NC}\n"
    echo "-----------------------"
    curl -s -L -k "$ipvictima" -o "curl80"
    echo -e "${YELLOW}\n[+]Posible app:  ${NC}"
    curl -s -L -k "$ipvictima" | grep -i -E "Powered by|X-Powered-By|<meta name=\"generator\" content=|<meta name=\"cms\" content=|<meta name=\"theme\" content=|<link rel=\"stylesheet\" href=" | sed -n -E '/.*<[^>]*>(.*Powered by.*)<[^>]*>.*/s//\1/p; /.*<[^>]*>(.*X-Powered-By.*)<[^>]*>.*/s//\1/p; /.*<[^>]*>(.*<meta name=\"generator\" content=.*)<[^>]*>.*/s//\1/p; /.*<[^>]*>(.*<meta name=\"cms\" content=.*)<[^>]*>.*/s//\1/p; /.*<[^>]*>(.*<meta name=\"theme\" content=.*)<[^>]*>.*/s//\1/p; /.*<[^>]*>(.*<link rel=\"stylesheet\" href=.*)<[^>]*>.*/s//\1/p'
    xdg-open "http://$ipvictima" &
fi

# Verify port 443 is open https

if echo "$ports" | grep -q "\<443\>"; then
    echo -e "${YELLOW}\n[+] Find open port 443 in IP $nombre , please review certificates for subdomains \n${NC}"
    echo -e "\n-----------------------"
    echo -e "${LIGHT_CYAN}[+]Curl to IP $ipvictima save file to curl443  ${NC}"
    echo -e "${GREEN}gobuster dir -w /usr/share/wordlists/seclists/Discovery/Web-Content/raft-small-words.txt -k -b 404 -t 100 -u https://$nombre.htb/ -o gobuster.dir.out ${NC}\n"
    echo -e "${GREEN}gobuster vhost -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -k -u https://$nombre.htb -o gobuster.vhost.out${NC}\n"
    echo "-----------------------"
    curl -s -k -L "https://$ipvictima" -o "curl443"
    echo -e "${YELLOW}\n[+]Posible app:  ${NC}"
    curl -s -L -k "https://$ipvictima" | grep -i -E "Powered by|X-Powered-By|<meta name=\"generator\" content=|<meta name=\"cms\" content=|<meta name=\"theme\" content=|<link rel=\"stylesheet\" href=" | sed -n -E '/.*<[^>]*>(.*Powered by.*)<[^>]*>.*/s//\1/p; /.*<[^>]*>(.*X-Powered-By.*)<[^>]*>.*/s//\1/p; /.*<[^>]*>(.*<meta name=\"generator\" content=.*)<[^>]*>.*/s//\1/p; /.*<[^>]*>(.*<meta name=\"cms\" content=.*)<[^>]*>.*/s//\1/p; /.*<[^>]*>(.*<meta name=\"theme\" content=.*)<[^>]*>.*/s//\1/p; /.*<[^>]*>(.*<link rel=\"stylesheet\" href=.*)<[^>]*>.*/s//\1/p'
    xdg-open "https://$ipvictima" &
fi

# Verify ports 139 o 445 are open smb 

if echo "$ports" | grep -q "139\|445"; then
    echo -e "${GREEN}\n[+] Find 139 o 445 open, en IP $ipvictima\n${NC}"
    echo -e "${YELLOW}[-] Runing enumeration SMB, LDAP, RPC, without Credentials using enum4linux-ng:\n${NC}"
    enum4linux-ng -Adv "$ipvictima"
    echo "-----------------------"
    echo -e "${YELLOW}[-] smbclient:${NC}"
    smbclient -N -L //"$ipvictima"
    netexec smb "$ipvictima"
    echo -e "${YELLOW}[-] Testing NetExec first only for shares:${NC}"
    nxc smb "$ipvictima" -u 'guest' -p '' --shares
    echo -e "-----------------------\n"
    echo -e "${YELLOW}[-] NetExec shares FILTER ONLY READ WRITE:${NC}"
    nxc smb "$ipvictima" -u 'guest' -p '' --shares --filter-shares READ WRITE
    echo -e "-----------------------\n"
    nxc smb "$ipvictima" -u 'guest' -p '' --rid-brute 10000
    echo -e "$-----------------------\n"
    echo -e "${LIGHT_BLUE}[i] Testing NetExec MODULES OF VULNS:${NC}"
    nxc smb "$ipvictima" -u 'guest' -p '' -M shadowcoerce -M petitpotam -M dfscoerce
fi
echo -e "${LIGHT_BLUE}\n[i] Waiting to finish complete Nmap in background...${NC}"

wait
paplay /usr/share/sounds/freedesktop/stereo/complete.oga

# Host name to /etc/hosts
echo "-----------------------"
echo -e "${LIGHT_BLUE}[i] Searching for hostnames to add in hosts file...${NC}"
echo "-----------------------"

tempfile=$(mktemp)

xmllint --xpath '//host/ports/port/script[@id="http-title" and @output!=""]/@output' ResultNmap"$nombre" | sed -n -E 's/.*(https?|http):\/\/([^/]+).*/\2/p' > "$tempfile"

declare -A uniqueHostnames

while IFS= read -r hostname; do
    if [ -n "$hostname" ] && [ -z "${uniqueHostnames["$hostname"]}" ]; then
    xdg-open "http://$hostname" &
    disown
        uniqueHostnames["$hostname"]=1
        if ! grep -q "$hostname" /etc/hosts; then
            echo -e "${LIGHT_BLUE}[i] Adding ${LIGHT_GREEN}$hostname${LIGHT_BLUE} to /etc/hosts${NC}"
            echo "$ipvictima $(dig +short "$hostname")$hostname # added by theseasson" | sudo tee -a /etc/hosts >/dev/null
        else
            echo -e "${LIGHT_BLUE}[i] Skip adding hostname because it already exists in /etc/hosts${NC}"
        fi
    else
        echo -e "${LIGHT_BLUE}[i] Skip adding hostname due to duplication or empty${NC}"
    fi
done < "$tempfile"

if [ -s "$tempfile" ]; then
    echo -e "${LIGHT_BLUE}\n[i] Hostnames found:${NC}"
    cat "$tempfile" | while IFS= read -r hostname; do
        echo -e "${LIGHT_GREEN}$hostname${NC}"
    done
else
    echo -e "${LIGHT_CYAN}\n[-] No hostnames found in Nmap.${NC}"
fi

rm "$tempfile"

## ftp
foldername="ftp$nombre"
# Find the <port> tag with the attribute portid="21" and state="open"
port_info=$(xmllint --xpath '//port[@portid="21" and state/@state="open"]' ResultNmap"$nombre" 2>/dev/null)

# Check if the <port> tag was found.
if [[ -n $port_info ]]; then
# Search if anonymous login is allowed in the <script> tag with id="ftp-anon"
  anon_login=$(echo "$port_info" | grep -o 'Anonymous FTP login allowed')

  if [[ -n $anon_login ]]; then
    echo -e "${LIGHT_BLUE}[i]Port 21 is open and anonymous login is allowed.${NC}"
    echo -e "${LIGHT_BLUE}[i]      Downloading FTP content...${NC}"

    # FTP content download
    wget --user=anonymous --password=anonymous -r "ftp://$ipvictima" -P "$foldername"
    echo -e "${LIGHT_GREEN}FTP content downloaded to $foldername${NC}"
  else
    echo -e "${BLUE}[i] Port 21 is open but anonymous login is not allowed.${NC}/n"
  fi
fi

## DNS server
# Find the <port> tag with the attribute portid="53" and state="open"
port_info53=$(xmllint --xpath '//port[@portid="53" and state/@state="open"]' "ResultNmap$nombre" 2>/dev/null)

if [[ -n $port_info53 ]]; then
  echo -e "${LIGHT_BLUE}\n[i] Port 53 DNS is open, try to grab the banner and run metasploit modules dns_amp and enum_dns${NC}\n"
  # launch domain dns search and dig banner grab
  dig version.bind CHAOS TXT @"$1"
  msfconsole -q -x "use auxiliary/scanner/dns/dns_amp; set RHOSTS $ipvictima; set RPORT 53; run; exit" && msfconsole -q -x "use auxiliary/gather/enum_dns; set RHOSTS $ipvictima; set RPORT 53; run; exit"
fi

echo -e "${YELLOW}\n[+]Bye...  ${NC}"
